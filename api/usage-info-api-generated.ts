/* tslint:disable */
/* eslint-disable */
/*
UploadThing REST API

UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.

The version of the OpenAPI document: 6.4.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrBadRequest } from '../models';
// @ts-ignore
import { ErrInternalServerError } from '../models';
// @ts-ignore
import { ErrUnauthorized } from '../models';
// @ts-ignore
import { UsageInfoGetUsageInfoResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsageInfoApi - axios parameter creator
 * @export
 */
export const UsageInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve usage info for the app associated with the provided API key.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageInfo: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('getUsageInfo', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/getUsageInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/getUsageInfo',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageInfoApi - functional programming interface
 * @export
 */
export const UsageInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve usage info for the app associated with the provided API key.
         * @param {UsageInfoApiGetUsageInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageInfo(requestParameters: UsageInfoApiGetUsageInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsageInfoGetUsageInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageInfo(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsageInfoApi - factory interface
 * @export
 */
export const UsageInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageInfoApiFp(configuration)
    return {
        /**
         * Retrieve usage info for the app associated with the provided API key.
         * @param {UsageInfoApiGetUsageInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageInfo(requestParameters: UsageInfoApiGetUsageInfoRequest, options?: AxiosRequestConfig): AxiosPromise<UsageInfoGetUsageInfoResponse> {
            return localVarFp.getUsageInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUsageInfo operation in UsageInfoApi.
 * @export
 * @interface UsageInfoApiGetUsageInfoRequest
 */
export type UsageInfoApiGetUsageInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsageInfoApiGetUsageInfo
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof UsageInfoApiGetUsageInfo
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof UsageInfoApiGetUsageInfo
    */
    readonly xUploadthingBeAdapter?: string
    
}

/**
 * UsageInfoApiGenerated - object-oriented interface
 * @export
 * @class UsageInfoApiGenerated
 * @extends {BaseAPI}
 */
export class UsageInfoApiGenerated extends BaseAPI {
    /**
     * Retrieve usage info for the app associated with the provided API key.
     * @param {UsageInfoApiGetUsageInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageInfoApiGenerated
     */
    public getUsageInfo(requestParameters: UsageInfoApiGetUsageInfoRequest, options?: AxiosRequestConfig) {
        return UsageInfoApiFp(this.configuration).getUsageInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
