/* tslint:disable */
/* eslint-disable */
/*
UploadThing REST API

UploadThing is the easiest way to add file uploads to your full stack TypeScript application. Many services have tried to build a \"better S3\", but in our opinion, none found the right compromise of ownership, flexibility and safety.

The version of the OpenAPI document: 6.4.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrBadRequest } from '../models';
// @ts-ignore
import { ErrInternalServerError } from '../models';
// @ts-ignore
import { ErrUnauthorized } from '../models';
// @ts-ignore
import { FileGetFileUrlsRequest } from '../models';
// @ts-ignore
import { FileGetFileUrlsResponse } from '../models';
// @ts-ignore
import { FileListFilesRequest } from '../models';
// @ts-ignore
import { FileListFilesResponse } from '../models';
// @ts-ignore
import { FileMarkForDeletionRequest } from '../models';
// @ts-ignore
import { FileMarkForDeletionResponse } from '../models';
// @ts-ignore
import { FileRenameFilesRequest } from '../models';
// @ts-ignore
import { FileRenameFilesRequestUpdatesInner } from '../models';
// @ts-ignore
import { FileRenameFilesResponse } from '../models';
// @ts-ignore
import { FileRequestPresignedUrl404Response } from '../models';
// @ts-ignore
import { FileRequestPresignedUrlRequest } from '../models';
// @ts-ignore
import { FileRequestPresignedUrlResponse } from '../models';
// @ts-ignore
import { FileRequestPresignedUrlsRequest } from '../models';
// @ts-ignore
import { FileRequestPresignedUrlsRequestFilesInner } from '../models';
// @ts-ignore
import { FileRequestPresignedUrlsResponse } from '../models';
// @ts-ignore
import { FileUpdateFileNameRequest } from '../models';
// @ts-ignore
import { FileUpdateFileNameResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of URLs for given file keys. This API is deprecated, use `https://utfs.io/f/FILE_KEY`.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {FileGetFileUrlsRequest} [fileGetFileUrlsRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getFileUrls: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, fileGetFileUrlsRequest?: FileGetFileUrlsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('getFileUrls', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/getFileUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileGetFileUrlsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/getFileUrl',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileGetFileUrlsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List files for the current app. Response is paginated.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {FileListFilesRequest} [fileListFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, fileListFilesRequest?: FileListFilesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('listFiles', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/listFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileListFilesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/listFiles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileListFilesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark files for deletion. The files will be deleted at the storage provider shortly after.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {FileMarkForDeletionRequest} [fileMarkForDeletionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markForDeletion: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, fileMarkForDeletionRequest?: FileMarkForDeletionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('markForDeletion', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/deleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileMarkForDeletionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/deleteFile',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileMarkForDeletionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rename files.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {FileRenameFilesRequest} [fileRenameFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameFiles: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, fileRenameFilesRequest?: FileRenameFilesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('renameFiles', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/renameFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileRenameFilesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/renameFiles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileRenameFilesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a presigned GET url for a private file.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {FileRequestPresignedUrlRequest} [fileRequestPresignedUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPresignedUrl: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, fileRequestPresignedUrlRequest?: FileRequestPresignedUrlRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('requestPresignedUrl', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/requestFileAccess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileRequestPresignedUrlRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/requestFileAccess',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileRequestPresignedUrlRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request presigned URLs for file uploads without file routes. NOTE: This spec complies with SDK versions ^6.4. Response may vary for older versions.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {FileRequestPresignedUrlsRequest} [fileRequestPresignedUrlsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPresignedUrls: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, fileRequestPresignedUrlsRequest?: FileRequestPresignedUrlsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('requestPresignedUrls', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/uploadFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileRequestPresignedUrlsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/uploadFiles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileRequestPresignedUrlsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use /renameFiles instead.
         * @param {string} xUploadthingVersion 
         * @param {string} [xUploadthingFePackage] 
         * @param {string} [xUploadthingBeAdapter] 
         * @param {FileUpdateFileNameRequest} [fileUpdateFileNameRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateFileName: async (xUploadthingVersion: string, xUploadthingFePackage?: string, xUploadthingBeAdapter?: string, fileUpdateFileNameRequest?: FileUpdateFileNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUploadthingVersion' is not null or undefined
            assertParamExists('updateFileName', 'xUploadthingVersion', xUploadthingVersion)
            const localVarPath = `/renameFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "x-uploadthing-api-key", keyParamName: "apiKeyAuth", configuration })
            if (xUploadthingVersion != null) {
                localVarHeaderParameter['x-uploadthing-version'] = String(xUploadthingVersion);
            }

            if (xUploadthingFePackage != null) {
                localVarHeaderParameter['x-uploadthing-fe-package'] = String(xUploadthingFePackage);
            }

            if (xUploadthingBeAdapter != null) {
                localVarHeaderParameter['x-uploadthing-be-adapter'] = String(xUploadthingBeAdapter);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fileUpdateFileNameRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/renameFile',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fileUpdateFileNameRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of URLs for given file keys. This API is deprecated, use `https://utfs.io/f/FILE_KEY`.
         * @param {FileApiGetFileUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getFileUrls(requestParameters: FileApiGetFileUrlsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileGetFileUrlsResponse>> {
            const fileGetFileUrlsRequest: FileGetFileUrlsRequest = {
                files: requestParameters.files,
                fileKeys: requestParameters.fileKeys,
                customIds: requestParameters.customIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileUrls(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, fileGetFileUrlsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List files for the current app. Response is paginated.
         * @param {FileApiListFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFiles(requestParameters: FileApiListFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileListFilesResponse>> {
            const fileListFilesRequest: FileListFilesRequest = {
                limit: requestParameters.limit,
                offset: requestParameters.offset
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, fileListFilesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark files for deletion. The files will be deleted at the storage provider shortly after.
         * @param {FileApiMarkForDeletionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markForDeletion(requestParameters: FileApiMarkForDeletionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileMarkForDeletionResponse>> {
            const fileMarkForDeletionRequest: FileMarkForDeletionRequest = {
                files: requestParameters.files,
                fileKeys: requestParameters.fileKeys,
                customIds: requestParameters.customIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.markForDeletion(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, fileMarkForDeletionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rename files.
         * @param {FileApiRenameFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renameFiles(requestParameters: FileApiRenameFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRenameFilesResponse>> {
            const fileRenameFilesRequest: FileRenameFilesRequest = {
                updates: requestParameters.updates
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.renameFiles(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, fileRenameFilesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request a presigned GET url for a private file.
         * @param {FileApiRequestPresignedUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestPresignedUrl(requestParameters: FileApiRequestPresignedUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRequestPresignedUrlResponse>> {
            const fileRequestPresignedUrlRequest: FileRequestPresignedUrlRequest = {
                fileKey: requestParameters.fileKey,
                customId: requestParameters.customId,
                expiresIn: requestParameters.expiresIn
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestPresignedUrl(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, fileRequestPresignedUrlRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request presigned URLs for file uploads without file routes. NOTE: This spec complies with SDK versions ^6.4. Response may vary for older versions.
         * @param {FileApiRequestPresignedUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestPresignedUrls(requestParameters: FileApiRequestPresignedUrlsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRequestPresignedUrlsResponse>> {
            const fileRequestPresignedUrlsRequest: FileRequestPresignedUrlsRequest = {
                files: requestParameters.files,
                acl: requestParameters.acl,
                metadata: requestParameters.metadata,
                contentDisposition: requestParameters.contentDisposition
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestPresignedUrls(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, fileRequestPresignedUrlsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use /renameFiles instead.
         * @param {FileApiUpdateFileNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateFileName(requestParameters: FileApiUpdateFileNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileUpdateFileNameResponse>> {
            const fileUpdateFileNameRequest: FileUpdateFileNameRequest = {
                updates: requestParameters.updates
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFileName(requestParameters.xUploadthingVersion, requestParameters.xUploadthingFePackage, requestParameters.xUploadthingBeAdapter, fileUpdateFileNameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * Get a list of URLs for given file keys. This API is deprecated, use `https://utfs.io/f/FILE_KEY`.
         * @param {FileApiGetFileUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getFileUrls(requestParameters: FileApiGetFileUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<FileGetFileUrlsResponse> {
            return localVarFp.getFileUrls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List files for the current app. Response is paginated.
         * @param {FileApiListFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles(requestParameters: FileApiListFilesRequest, options?: AxiosRequestConfig): AxiosPromise<FileListFilesResponse> {
            return localVarFp.listFiles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark files for deletion. The files will be deleted at the storage provider shortly after.
         * @param {FileApiMarkForDeletionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markForDeletion(requestParameters: FileApiMarkForDeletionRequest, options?: AxiosRequestConfig): AxiosPromise<FileMarkForDeletionResponse> {
            return localVarFp.markForDeletion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename files.
         * @param {FileApiRenameFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameFiles(requestParameters: FileApiRenameFilesRequest, options?: AxiosRequestConfig): AxiosPromise<FileRenameFilesResponse> {
            return localVarFp.renameFiles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a presigned GET url for a private file.
         * @param {FileApiRequestPresignedUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPresignedUrl(requestParameters: FileApiRequestPresignedUrlRequest, options?: AxiosRequestConfig): AxiosPromise<FileRequestPresignedUrlResponse> {
            return localVarFp.requestPresignedUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request presigned URLs for file uploads without file routes. NOTE: This spec complies with SDK versions ^6.4. Response may vary for older versions.
         * @param {FileApiRequestPresignedUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPresignedUrls(requestParameters: FileApiRequestPresignedUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<FileRequestPresignedUrlsResponse> {
            return localVarFp.requestPresignedUrls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use /renameFiles instead.
         * @param {FileApiUpdateFileNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateFileName(requestParameters: FileApiUpdateFileNameRequest, options?: AxiosRequestConfig): AxiosPromise<FileUpdateFileNameResponse> {
            return localVarFp.updateFileName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFileUrls operation in FileApi.
 * @export
 * @interface FileApiGetFileUrlsRequest
 */
export type FileApiGetFileUrlsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FileApiGetFileUrls
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiGetFileUrls
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiGetFileUrls
    */
    readonly xUploadthingBeAdapter?: string
    
} & FileGetFileUrlsRequest

/**
 * Request parameters for listFiles operation in FileApi.
 * @export
 * @interface FileApiListFilesRequest
 */
export type FileApiListFilesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FileApiListFiles
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiListFiles
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiListFiles
    */
    readonly xUploadthingBeAdapter?: string
    
} & FileListFilesRequest

/**
 * Request parameters for markForDeletion operation in FileApi.
 * @export
 * @interface FileApiMarkForDeletionRequest
 */
export type FileApiMarkForDeletionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FileApiMarkForDeletion
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiMarkForDeletion
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiMarkForDeletion
    */
    readonly xUploadthingBeAdapter?: string
    
} & FileMarkForDeletionRequest

/**
 * Request parameters for renameFiles operation in FileApi.
 * @export
 * @interface FileApiRenameFilesRequest
 */
export type FileApiRenameFilesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRenameFiles
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRenameFiles
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRenameFiles
    */
    readonly xUploadthingBeAdapter?: string
    
} & FileRenameFilesRequest

/**
 * Request parameters for requestPresignedUrl operation in FileApi.
 * @export
 * @interface FileApiRequestPresignedUrlRequest
 */
export type FileApiRequestPresignedUrlRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRequestPresignedUrl
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRequestPresignedUrl
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRequestPresignedUrl
    */
    readonly xUploadthingBeAdapter?: string
    
} & FileRequestPresignedUrlRequest

/**
 * Request parameters for requestPresignedUrls operation in FileApi.
 * @export
 * @interface FileApiRequestPresignedUrlsRequest
 */
export type FileApiRequestPresignedUrlsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRequestPresignedUrls
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRequestPresignedUrls
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiRequestPresignedUrls
    */
    readonly xUploadthingBeAdapter?: string
    
} & FileRequestPresignedUrlsRequest

/**
 * Request parameters for updateFileName operation in FileApi.
 * @export
 * @interface FileApiUpdateFileNameRequest
 */
export type FileApiUpdateFileNameRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FileApiUpdateFileName
    */
    readonly xUploadthingVersion: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiUpdateFileName
    */
    readonly xUploadthingFePackage?: string
    
    /**
    * 
    * @type {string}
    * @memberof FileApiUpdateFileName
    */
    readonly xUploadthingBeAdapter?: string
    
} & FileUpdateFileNameRequest

/**
 * FileApiGenerated - object-oriented interface
 * @export
 * @class FileApiGenerated
 * @extends {BaseAPI}
 */
export class FileApiGenerated extends BaseAPI {
    /**
     * Get a list of URLs for given file keys. This API is deprecated, use `https://utfs.io/f/FILE_KEY`.
     * @param {FileApiGetFileUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof FileApiGenerated
     */
    public getFileUrls(requestParameters: FileApiGetFileUrlsRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).getFileUrls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List files for the current app. Response is paginated.
     * @param {FileApiListFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiGenerated
     */
    public listFiles(requestParameters: FileApiListFilesRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).listFiles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark files for deletion. The files will be deleted at the storage provider shortly after.
     * @param {FileApiMarkForDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiGenerated
     */
    public markForDeletion(requestParameters: FileApiMarkForDeletionRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).markForDeletion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rename files.
     * @param {FileApiRenameFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiGenerated
     */
    public renameFiles(requestParameters: FileApiRenameFilesRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).renameFiles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request a presigned GET url for a private file.
     * @param {FileApiRequestPresignedUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiGenerated
     */
    public requestPresignedUrl(requestParameters: FileApiRequestPresignedUrlRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).requestPresignedUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request presigned URLs for file uploads without file routes. NOTE: This spec complies with SDK versions ^6.4. Response may vary for older versions.
     * @param {FileApiRequestPresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiGenerated
     */
    public requestPresignedUrls(requestParameters: FileApiRequestPresignedUrlsRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).requestPresignedUrls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use /renameFiles instead.
     * @param {FileApiUpdateFileNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof FileApiGenerated
     */
    public updateFileName(requestParameters: FileApiUpdateFileNameRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).updateFileName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
